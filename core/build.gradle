apply plugin: "java"
apply plugin: "com.install4j.gradle"
apply plugin: "de.undercouch.download"


import com.install4j.gradle.Install4jTask
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

JavaVersion minJavaVersion = JavaVersion.VERSION_16
java {
    sourceCompatibility = minJavaVersion
}
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

project.ext.mainClassName = "gaiasky.desktop.GaiaSkyDesktop"
project.ext.workDir = new File("../")
project.ext.assetsDir = new File(project.ext.workDir, "assets")
project.ext.sourceSets = sourceSets
project.ext.tmpDir = new File("/tmp/gaiasky-gradle/")
project.ext.tmpDir.mkdirs()
project.ext.jreArchive = "jre-archive.tar.gz"

tasks.register('versionFile') {
    doLast {
        File versionFile = file('build/classes/java/main/version')
        delete versionFile
        def writer = new FileWriter(versionFile)

        try {
            writer.write('buildtime=' + project(':core').buildtime + '\n')
            writer.write('build=' + project(':core').rev + '\n')
            writer.write('version=' + project(':core').tag + '\n')
            writer.write('builder=' + project(':core').builder + '\n')
            writer.write('system=' + project(':core').system + '\n')
            writer.flush()
        } finally {
            writer.close()
        }
    }
}

jar {
    dependsOn versionFile
    exclude('**/*.hiero')
    exclude('**/*.svg')
    exclude('**/*.xcf')
}

install4j {
    installDir = file("${System.properties['user.home']}/Programs/install4j10")
}

sourceSets {
    main {
        main {
            output.resourcesDir = project.assetsDir.absolutePath
        }
    }
}

abstract class GaiaSkyRun extends JavaExec {
    public GaiaSkyRun() {
        mainClass = project.mainClassName as String
    }

    public void setup() {
        systemProperties['properties.file'] = ''
        systemProperties['assets.location'] = './assets/'
        systemProperties['org.slf4j.simpleLogger.defaultLogLevel'] = 'warn'  // logging levels (e.g. REST server warn, info, debug)
        systemProperties['org.slf4j.simpleLogger.showThreadName'] = 'false'

        minHeapSize = "3g"
        maxHeapSize = "6g"
        // Parallel GC
        //jvmArgs = [ '-XX:+UseParNewGC']
        // CMS GC
        //jvmArgs = ['-server', '-XX:+UseConcMarkSweepGC', '-XX:+UseParNewGC', '-XX:MaxGCPauseMillis=5', '-XX:+CMSParallelRemarkEnabled', '-XX:CMSInitiatingOccupancyFraction=60', '-XX:MaxTenuringThreshold=4', '-XX:MaxNewSize=384m', '-XX:NewSize=384m', '-XX:SurvivorRatio=12']
        // Default GC
        //jvmArgs "-XX:+UseShenandoahGC"
        if (DefaultNativePlatform.currentOperatingSystem.macOsX) {
            // Required to run lwjgl3 java apps on macOS
            jvmArgs("-XstartOnFirstThread")
        }
        // Verbose GC
        // jvmArgs = ['-verbose:gc']
        classpath = project.ext.sourceSets.main.runtimeClasspath
        classpath += project.files(project.ext.assetsDir)
        standardInput = System.in
        workingDir = project.ext.workDir
    }
}

tasks.register('run', GaiaSkyRun) {
    dependsOn jar
    setup()
}

tasks.register('runTranslationStatus', JavaExec) {
    dependsOn jar
    systemProperties['assets.location'] = './assets/'
    classpath = project.ext.sourceSets.main.runtimeClasspath
    classpath += project.files(project.ext.assetsDir)
    standardInput = System.in
    workingDir = project.ext.workDir
    mainClass = "gaiasky.desktop.util.I18nStatus"
}

tasks.register('runI18nFormatter', JavaExec) {
    dependsOn jar
    systemProperties['assets.location'] = './assets/'
    classpath = project.ext.sourceSets.main.runtimeClasspath
    classpath += project.files(project.ext.assetsDir)
    standardInput = System.in
    workingDir = project.ext.workDir
    mainClass = "gaiasky.desktop.util.I18nFormatter"
}

tasks.register('createDistDir') {
    doLast {
        File distDir = new File(project.distDir as String)
        // Prepare output directory
        delete distDir
        mkdir distDir
    }
}

tasks.register('copyToLib') {
    dependsOn createDistDir
    doLast {
        // Create releases/dist/lib
        File distLib = new File(project.distDir as String, 'lib')
        mkdir distLib
        project.ext.distLib = distLib.getPath()

        // Copy deps to dist lib folder
        ['runtimeClasspath'].each { mode ->
            copy {
                duplicatesStrategy = 'include'
                from configurations.getByName(mode).files
                into project.distLib
                exclude "**/data"
                exclude "**/assets-bak"
                exclude "**/core-" + version + ".jar"
                exclude "dummyversion"
            }
        }

        // Remove folders
        delete project.distLib + '/archetypes'
        delete project.distLib + '/conf'
        delete project.distLib + '/data'
        delete project.distLib + '/font'
        delete project.distLib + '/i18n'
        delete project.distLib + '/icon'
        delete project.distLib + '/img'
        delete project.distLib + '/music'
        delete project.distLib + '/mappings'
        delete project.distLib + '/bookmarks'
        delete project.distLib + '/rest-static'
        delete project.distLib + '/scripts'
        delete project.distLib + '/shader'
        delete project.distLib + '/shaders'
        delete project.distLib + '/skins'
        delete project.distLib + '/text'
        delete project.distLib + '/cert'
    }
}

tasks.register('gaiaskyJar') {
    dependsOn compileJava, jar, copyToLib
    doLast {
        copy {
            from "$baseDir/core/build/libs/core-" + version + ".jar"
            into "$distLib/"
        }
        file("$distLib/core-" + version + ".jar").renameTo(file("$distLib/gaiasky-core.jar"))
    }
}

tasks.register('execPermission', Exec) {
    commandLine "chmod", "ugo+x", "$distDir/gaiasky"
}

tasks.register('manGen', Exec) {
    workingDir "$distDir"
    commandLine "help2man", "--no-discard-stderr", "-N", "--section=6", "--include", "$baseDir/core/man/gaiasky.h2m", "--output=$distDir/gaiasky.6", "$distDir/gaiasky"
}

tasks.register('genReleaseNotes', Exec) {
    println("generate-releasenotes $tag $distDir/releasenotes.txt")
    workingDir "$baseDir/core/scripts/release/"
    commandLine "/bin/bash", "generate-releasenotes", "$tag", "$distDir/releasenotes.txt"
}

tasks.register('dist') {
    dependsOn gaiaskyJar, genReleaseNotes
    doLast {
        // Version check
        String vsc = "${System.env.GS_JAVA_VERSION_CHECK}"
        boolean javaVersionOk = JavaVersion.current().isCompatibleWith(minJavaVersion)
        if (vsc.equalsIgnoreCase("false")) {
            if (!javaVersionOk) {
                println("WARNING: Gaia Sky must be built with Java " + minJavaVersion + " or compatible, you are using " + JavaVersion.current())
            }
        } else {
            if (!javaVersionOk) {
                print("FAILURE: Do 'export GS_JAVA_VERSION_CHECK=false' to skip this check")
                throw new GradleException("Gaia Sky must be built with java " + minJavaVersion + " or compatible, you are using " + JavaVersion.current())
            }
        }

        if (javaVersionOk) {
            println("OK: Building with Java " + JavaVersion.current())
        }

        // Copy conf
        mkdir "$distDir/conf"
        copy {
            from "$baseDir/assets/conf"
            into "$distDir/conf"
        }

        // Copy i18n files
        mkdir "$distDir/i18n"
        copy {
            from "$baseDir/assets/i18n"
            into "$distDir/i18n"
        }

        // Copy mappings
        mkdir "$distDir/mappings"
        copy {
            from "../assets/mappings"
            into "$distDir/mappings"
        }

        // Copy bookmarks
        mkdir "$distDir/bookmarks"
        copy {
            from "../assets/bookmarks"
            into "$distDir/bookmarks"
        }

        // Copy rest-static
        mkdir "$distDir/rest-static"
        copy {
            from "../assets/rest-static"
            into "$distDir/rest-static"
        }

        // Copy script files
        mkdir "$distDir/scripts"
        copy {
            from "$baseDir/assets/scripts"
            into "$distDir/scripts"
        }

        // Copy scripts, README, LICENSE and AUTHORS
        copy {
            from "exe"
            into "$distDir"
            exclude "octreegen"
            exclude ".idea"
        }
        copy {
            from "$baseDir/"
            into "$distDir"
            include "README.md"
            include "VR.md"
            include "LICENSE"
            include "AUTHORS"
        }
        copy {
            from "$baseDir/assets/icon"
            into "$distDir"
            include "gs_icon.png"
            include "gs_icon.ico"
            include "gs_icon.svg"
            include "gsvr_icon.png"
            include "gsvr_icon.ico"
        }

        // Replace version in readme file
        project.ext.versionFile = file("build/classes/java/main/version").text
        ant.replace(file: "$distDir/README.md", token: "--------------------------", value: "$versionFile")

        if (!DefaultNativePlatform.currentOperatingSystem.windows) {
            // Give execute
            execPermission.exec()

            if (DefaultNativePlatform.currentOperatingSystem.linux) {
                // Generate man
                println("Generate man: $distDir/gaiasky.6.gz")
                manGen.exec()
                exec {
                    commandLine "gzip", "$distDir/gaiasky.6"
                }
            }
        }
    }
}
dist.dependsOn classes


tasks.register('createTar') {
    dependsOn dist
    doLast {
        File packageDir = new File(project.packageDir)

        delete packageDir
        mkdir packageDir

        ant.tar(destfile: "$packageDir/" + project.distName + ".tar.gz", compression: 'gzip', longfile: 'gnu') {
            tarfileset(dir: "$releasesDir") {
                include(name: "$distName/**")
                exclude(name: "$distName/AppRun")
                exclude(name: "$distName/gaiasky-appimage.desktop")
                exclude(name: "$distName/de.uni_heidelberg.zah.GaiaSky.metainfo.xml")
            }
            tarfileset(dir: "$releasesDir", filemode: '755') {
                include(name: "$distName/gaiasky")
            }
        }

        // Checksums
        File tarFile = new File("$packageDir/" + project.distName + ".tar.gz")
        ant.checksum(file: tarFile, algorithm: "md5", todir: "$packageDir/")
        ant.checksum(file: tarFile, algorithm: "sha-256", todir: "$packageDir/")
    }
}

tasks.register('downloadJRE', Download) {
    src "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jre_x64_linux_hotspot_17.0.6_10.tar.gz"
    dest new File("$tmpDir", "$jreArchive")
    onlyIfModified true
    overwrite false
}
tasks.register('downloadAndExtractJRE') {
    dependsOn downloadJRE
    doLast {
        File jreArchivePath = new File("$tmpDir", "$jreArchive")
        // Delete pre-existing jre
        project.tmpDir.eachFile(groovy.io.FileType.DIRECTORIES) { dir ->
            delete "$dir"
        }
        // Extract
        copy {
            from tarTree(resources.gzip(jreArchivePath))
            into project.tmpDir
        }

        // Set location
        String[] tmpfiles = project.tmpDir.listFiles()
        project.ext.jreDir = tmpfiles[0]
    }
}

tasks.register('createAppImage') {
    dependsOn createTar, downloadAndExtractJRE
    doLast {
        String gsId = "gaiasky"
        String appimgDir = "$packageDir" + "/" + "$gsId" + ".AppDir"

        delete "$appimgDir"
        mkdir "$appimgDir"

        // Copy all from dist to appimage
        copy {
            from "$distDir"
            into "$appimgDir"
        }

        // Package JRE
        println("Packaging JRE $jreDir into AppImage")
        copy {
            from "$jreDir"
            into "$appimgDir/usr"
        }

        // Metadata
        File usrmeta = new File("$appimgDir", "usr/share/metainfo/")
        usrmeta.mkdirs()
        copy {
            from file("$appimgDir/" + "$gsId" + ".appdata.xml")
            into usrmeta
        }

        // Set up AppRun executable, remove unneeded files
        delete "$appimgDir/gaiasky", "$appimgDir/gaiasky.cmd"
        delete "$appimgDir/gs_icon.ico", "$appimgDir/gs_icon.svg", "$appimgDir/gsvr_icon.ico", "$appimgDir/gsvr_icon.png"
        delete "$appimgDir/gaiasky.desktop"
        delete "$appimgDir/" + "$gsId" + ".appdata.xml"
        file("$appimgDir/gaiasky-appimage.desktop").renameTo(file("$appimgDir/gaiasky.desktop"))

        String appImgFilename = "$gsId" + "_" + "$tagRev" + "_x86_64.appimage"
        // Generate appimage
        exec {
            executable "appimagetool"
            args "-n", "$appimgDir", "$packageDir/$appImgFilename"
        }

        // Checksums
        File appImgFile = new File("$packageDir/$appImgFilename")
        ant.checksum(file: appImgFile, algorithm: "md5", todir: "$packageDir/")
        ant.checksum(file: appImgFile, algorithm: "sha-256", todir: "$packageDir/")
    }
}

tasks.register('createArch') {
    dependsOn createTar
    doLast {
        File archDir = new File(project.packageDir + "/arch/")
        mkdir archDir
        copy {
            from "installerscripts/arch"
            into "$packageDir/arch"
        }
        copy {
            from "$distDir"
            into "$packageDir/arch/"
            include "releasenotes.txt"
        }

        String md5Tar = new File("$packageDir/" + project.distName + ".tar.gz.md5").text
        md5Tar = md5Tar.replace("\n", "").replace("\r", "");

        String sha256Tar = new File("$packageDir/" + project.distName + ".tar.gz.sha-256").text
        sha256Tar = sha256Tar.replace("\n", "").replace("\r", "");

        String tagVersion = tagRev.substring(0, tagRev.lastIndexOf("."))
        String tagRevision = "1"
        if (tagVersion.contains("-")) {
            String v = tagVersion
            tagVersion = tagVersion.substring(0, tagVersion.lastIndexOf("-"))
            tagRevision = v.substring(v.lastIndexOf("-") + 1)
        }

        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@version.revision@', value: "$tagRev")
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@version@', value: "$tagVersion")
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@revision@', value: "$tagRevision")
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@md5checksum@', value: md5Tar)
        ant.replace(file: "$packageDir/arch/PKGBUILD", token: '@sha256checksum@', value: sha256Tar)

        // Run makepkg to create .SRCINFO
        //exec {
        //    workingDir "$packageDir/arch/"
        //    executable "makepkg"
        //    args "--printsrcinfo",">",".SRCINFO"
        //}
    }
}

static def buildTime() {
    return new Date()
}

def distDirSize() {
    File dist = new File(project.distDir as String)
    return Math.round(dist.directorySize() / 1024)
}

tasks.register('createDeb') {
    dependsOn createTar
    doLast {
        // Base deb directory
        File debDir = new File(project.packageDir + "/$distName")
        // Opt dir
        File debOptDir = new File(project.packageDir + "/$distName/opt/gaiasky")
        mkdir debOptDir
        // DEBIAN directory
        File debDEBIANDir = new File(project.packageDir + "/$distName/DEBIAN")
        mkdir debDEBIANDir

        copy {
            from "installerscripts/debian"
            into "$packageDir/$distName/DEBIAN"
        }

        ant.replace(file: "$packageDir/$distName/DEBIAN/control", token: '@version.revision@', value: "$tagRev")
        ant.replace(file: "$packageDir/$distName/DEBIAN/control", token: '@installedsize@', value: "${distDirSize()}")
        ant.replace(file: "$packageDir/$distName/DEBIAN/control", token: '@date@', value: "${buildTime()}")

        copy {
            from "$distDir"
            into "$packageDir/$distName/opt/gaiasky/"
        }

        // Create deb
        exec {
            executable "dpkg-deb"
            args "--build", "$packageDir/$distName"
        }

        // Remove temp dir directory
        delete debDir
    }
}

tasks.register('prepareInstall4jScript') {
    dependsOn createTar
    doLast {
        copy {
            from "installerscripts/template.install4j"
            into "$packageDir"
        }
        file("$packageDir/template.install4j").renameTo(file("$packageDir/" + project.distName + ".install4j"))

        project.ext.releaseFolder = "$baseDir/releases/$distName"

        ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@gs-release-folder@', value: "$distDir")
        ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@gs-git-folder@', value: "$baseDir")
        ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@version-tag@', value: "$tagRev")
    }
}

tasks.register('install4jMedia', Install4jTask) {
    dependsOn prepareInstall4jScript

    if (project.hasProperty("winKeystorePassword")) {
        winKeystorePassword = project.ext.winKeystorePassword
    } else {
        if (gradle.startParameter.taskNames.contains("core:pack")) {
            throw new GradleException("Please specify the kesytore password for signing Windows packages:\ngradlew core:pack -PwinKeystorePassword=yourpass")
        }
    }

    projectFile = file("$packageDir/" + project.distName + ".install4j")
    variables = [majorVersion: project.tag, build: project.rev]
    release = project.tag

    doLast {

        println("Install4j script location:")
        println("$packageDir/" + project.distName + ".install4j")
    }
}


tasks.register('pack') {
    dependsOn 'install4jMedia', 'createAppImage', 'createArch'
    doLast {
        println("Appending md5 checksum of " + project.distName + ".tar.gz and gaiasky_" + "$tagRev" + "_x86_64.appimage to md5sums file")
        File md5File = file("$packageDir/" + 'md5sums')
        if (md5File.exists()) {
            // Tar
            String md5Tar = file("$packageDir/" + project.distName + ".tar.gz.md5").text
            md5Tar = md5Tar.replace("\n", "").replace("\r", "");

            // Appimage
            String md5AppImg = file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.md5").text
            md5AppImg = md5AppImg.replace("\n", "").replace("\r", "");

            md5File.text = file("$packageDir/" + 'md5sums').text + md5Tar + " *" + project.distName + ".tar.gz\n" + md5AppImg + " *gaiasky_" + "$tagRev" + "_x86_64.appimage\n"
            println("Removing files " + project.distName + ".tar.gz.md5 and gaiasky_" + "$tagRev" + "_x86_64.appimage.md5")
            file("$packageDir/" + project.distName + ".tar.gz.md5").delete()
            file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.md5").delete()
        } else {
            println("md5 file not found: " + md5File)
        }

        println("Appending sha256 checksum of " + project.distName + ".tar.gz to sha256sums file")
        File sha256File = file("$packageDir/" + 'sha256sums')
        if (sha256File.exists()) {
            // Tar
            String sha256Tar = file("$packageDir/" + project.distName + ".tar.gz.sha-256").text
            sha256Tar = sha256Tar.replace("\n", "").replace("\r", "");

            // Appimage
            String sha256AppImg = file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.sha-256").text
            sha256AppImg = sha256AppImg.replace("\n", "").replace("\r", "");

            sha256File.text = file("$packageDir/" + 'sha256sums').text + sha256Tar + " *" + project.distName + ".tar.gz\n" + sha256AppImg + " *gaiasky_" + "$tagRev" + "_x86_64.appimage\n"
            println("Removing files " + project.distName + ".tar.gz.sha-256 and gaiasky_" + "$tagRev" + "_x86_64.appimage.sha-256")
            file("$packageDir/" + project.distName + ".tar.gz.sha-256").delete()
            file("$packageDir/gaiasky_" + "$tagRev" + "_x86_64.appimage.sha-256").delete()
        } else {
            println("sha256 file not found: " + sha256File)
        }
    }
}

eclipse {
    project {
        name = appName.toLowerCase() + "-core"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/assets'
    }
}
